const express = require('express')
const app = express()
const port = 3000
var cdt2d = require('cdt2d')

app.get('/', (req, res) => {
     dataChartContour = [[1.999,0,0],[1.999,0.037,0],[1.999,0.074,0],[1.999,0.111,0],[1.999,0.148,0],[1.999,0.185,null],[1.999,0.222,null],[1.999,0.259,null],[1.999,0.296,null],[1.999,0.333,null],[1.999,0.37,null],[1.999,0.407,null],[1.999,0.444,null],[1.999,0.481,null],[1.999,0.518,null],[1.999,0.555,null],[1.999,0.592,null],[1.999,0.629,null],[1.999,0.666,null],[1.999,0.703,null],[3,0,0.0241],[3,0.037,0.0235],[3,0.074,0.0233],[3,0.111,0.0229],[3,0.148,0.0224],[3,0.185,0.0218],[3,0.222,0.0211],[3,0.259,0.0203],[3,0.296,0.0191],[3,0.333,0.0173],[3,0.37,0],[3,0.407,null],[3,0.444,null],[3,0.481,null],[3,0.518,null],[3,0.555,null],[3,0.592,null],[3,0.629,null],[3,0.666,null],[3,0.703,null],[4,0,0.102],[4,0.037,0.1005],[4,0.074,0.0997],[4,0.111,0.0988],[4,0.148,0.0969],[4,0.185,0.0959],[4,0.222,0.0948],[4,0.259,0.0924],[4,0.296,0.091],[4,0.333,0.0895],[4,0.37,0.0859],[4,0.407,0.0837],[4,0.444,0.0811],[4,0.481,0.0734],[4,0.518,0.0665],[4,0.555,0],[4,0.592,null],[4,0.629,null],[4,0.666,null],[4,0.703,null],[5.5,0,0.1229],[5.5,0.037,0.121],[5.5,0.074,0.1201],[5.5,0.111,0.119],[5.5,0.148,0.1168],[5.5,0.185,0.1155],[5.5,0.222,0.1142],[5.5,0.259,0.1128],[5.5,0.296,0.1096],[5.5,0.333,0.1078],[5.5,0.37,0.1058],[5.5,0.407,0.1008],[5.5,0.444,0.0976],[5.5,0.481,0.0937],[5.5,0.518,0.0884],[5.5,0.555,0],[5.5,0.592,null],[5.5,0.629,null],[5.5,0.666,null],[5.5,0.703,null],[7,0,0.1625],[7,0.037,0.1601],[7,0.074,0.1588],[7,0.111,0.1574],[7,0.148,0.156],[7,0.185,0.1528],[7,0.222,0.1511],[7,0.259,0.1492],[7,0.296,0.1472],[7,0.333,0.1426],[7,0.37,0.1399],[7,0.407,0.1369],[7,0.444,0.1333],[7,0.481,0.124],[7,0.518,0.117],[7,0.555,0.106],[7,0.592,0],[7,0.629,null],[7,0.666,null],[7,0.703,null],[8.5,0,0.2073],[8.5,0.037,0.2042],[8.5,0.074,0.2026],[8.5,0.111,0.2008],[8.5,0.148,0.199],[8.5,0.185,0.197],[8.5,0.222,0.195],[8.5,0.259,0.1904],[8.5,0.296,0.1878],[8.5,0.333,0.185],[8.5,0.37,0.1819],[8.5,0.407,0.1785],[8.5,0.444,0.1746],[8.5,0.481,0.1648],[8.5,0.518,0.1581],[8.5,0.555,0.1492],[8.5,0.592,0.1352],[8.5,0.629,0],[8.5,0.666,null],[8.5,0.703,null],[10,0,0.175],[10,0.037,0.1724],[10,0.074,0.171],[10,0.111,0.1695],[10,0.148,0.1679],[10,0.185,0.1663],[10,0.222,0.1645],[10,0.259,0.1627],[10,0.296,0.1606],[10,0.333,0.1585],[10,0.37,0.1561],[10,0.407,0.1535],[10,0.444,0.1473],[10,0.481,0.1435],[10,0.518,0.139],[10,0.555,0.1334],[10,0.592,0.1259],[10,0.629,0.1141],[10,0.666,0],[10,0.703,null],[11.5,0,0.2165],[11.5,0.037,0.2132],[11.5,0.074,0.2115],[11.5,0.111,0.2097],[11.5,0.148,0.2077],[11.5,0.185,0.2057],[11.5,0.222,0.2012],[11.5,0.259,0.1987],[11.5,0.296,0.1961],[11.5,0.333,0.1931],[11.5,0.37,0.1899],[11.5,0.407,0.1863],[11.5,0.444,0.1776],[11.5,0.481,0.172],[11.5,0.518,0.1651],[11.5,0.555,0.1558],[11.5,0.592,0.1411],[11.5,0.629,0],[11.5,0.666,null],[11.5,0.703,null],[13,0,0.2179],[13,0.037,0.2147],[13,0.074,0.2129],[13,0.111,0.2111],[13,0.148,0.2092],[13,0.185,0.2071],[13,0.222,0.2026],[13,0.259,0.2001],[13,0.296,0.1974],[13,0.333,0.1944],[13,0.37,0.1912],[13,0.407,0.1835],[13,0.444,0.1788],[13,0.481,0.1732],[13,0.518,0.1662],[13,0.555,0.1568],[13,0.592,0],[13,0.629,null],[13,0.666,null],[13,0.703,null],[14.5,0,0.2113],[14.5,0.037,0.2082],[14.5,0.074,0.2065],[14.5,0.111,0.2047],[14.5,0.148,0.2028],[14.5,0.185,0.2008],[14.5,0.222,0.1987],[14.5,0.259,0.1965],[14.5,0.296,0.194],[14.5,0.333,0.1885],[14.5,0.37,0.1854],[14.5,0.407,0.1819],[14.5,0.444,0.1779],[14.5,0.481,0.1734],[14.5,0.518,0.1679],[14.5,0.555,0.1612],[14.5,0.592,0.1521],[14.5,0.629,0],[14.5,0.666,null],[14.5,0.703,null],[16,0,0.2632],[16,0.037,0.2593],[16,0.074,0.2572],[16,0.111,0.2549],[16,0.148,0.2526],[16,0.185,0.2501],[16,0.222,0.2475],[16,0.259,0.2416],[16,0.296,0.2384],[16,0.333,0.2348],[16,0.37,0.2309],[16,0.407,0.2265],[16,0.444,0.2216],[16,0.481,0.2091],[16,0.518,0.2007],[16,0.555,0.1894],[16,0.592,0.1716],[16,0.629,0],[16,0.666,null],[16,0.703,null],[17.5,0,0.2559],[17.5,0.037,0.2521],[17.5,0.074,0.25],[17.5,0.111,0.2479],[17.5,0.148,0.2432],[17.5,0.185,0.2406],[17.5,0.222,0.2379],[17.5,0.259,0.2349],[17.5,0.296,0.2283],[17.5,0.333,0.2245],[17.5,0.37,0.2203],[17.5,0.407,0.2099],[17.5,0.444,0.2033],[17.5,0.481,0.1951],[17.5,0.518,0.1842],[17.5,0.555,0],[17.5,0.592,null],[17.5,0.629,null],[17.5,0.666,null],[17.5,0.703,null],[19,0,0.2355],[19,0.037,0.232],[19,0.074,0.2301],[19,0.111,0.2281],[19,0.148,0.226],[19,0.185,0.2214],[19,0.222,0.2189],[19,0.259,0.2162],[19,0.296,0.2133],[19,0.333,0.2066],[19,0.37,0.2027],[19,0.407,0.1983],[19,0.444,0.1932],[19,0.481,0.1796],[19,0.518,0.1695],[19,0.555,0.1535],[19,0.592,0],[19,0.629,null],[19,0.666,null],[19,0.703,null],[20.5,0,0.1878],[20.5,0.037,0.185],[20.5,0.074,0.1835],[20.5,0.111,0.1835],[20.5,0.148,0.182],[20.5,0.185,0.1803],[20.5,0.222,0.1785],[20.5,0.259,0.1766],[20.5,0.296,0.1746],[20.5,0.333,0.1701],[20.5,0.37,0.1701],[20.5,0.407,0.1648],[20.5,0.444,0.1648],[20.5,0.481,0.1617],[20.5,0.518,0.1582],[20.5,0.555,0.1541],[20.5,0.592,0.1493],[20.5,0.629,0.1433],[20.5,0.666,0.1352],[20.5,0.703,0],[22,0,0.1817],[22,0.037,0.179],[22,0.074,0.1775],[22,0.111,0.176],[22,0.148,0.1727],[22,0.185,0.1708],[22,0.222,0.1689],[22,0.259,0.1668],[22,0.296,0.1621],[22,0.333,0.1594],[22,0.37,0.1564],[22,0.407,0.153],[22,0.444,0.1444],[22,0.481,0.1386],[22,0.518,0.1308],[22,0.555,0.1184],[22,0.592,null],[22,0.629,null],[22,0.666,null],[22,0.703,null],[23.5,0,0.1766],[23.5,0.037,0.1739],[23.5,0.074,0.1725],[23.5,0.111,0.171],[23.5,0.148,0.1678],[23.5,0.185,0.166],[23.5,0.222,0.1641],[23.5,0.259,0.1599],[23.5,0.296,0.1575],[23.5,0.333,0.1549],[23.5,0.37,0.1487],[23.5,0.407,0.1448],[23.5,0.444,0.1403],[23.5,0.481,0.1271],[23.5,0.518,0.1151],[23.5,0.555,0],[23.5,0.592,null],[23.5,0.629,null],[23.5,0.666,null],[23.5,0.703,null],[25,0,0.1625],[25,0.037,0.1601],[25,0.074,0.1574],[25,0.111,0.1545],[25,0.148,0.1511],[25,0.185,0.1472],[25,0.222,0.1426],[25,0.259,0.1399],[25,0.296,0.1333],[25,0.333,0.124],[25,0.37,0.106],[25,0.407,null],[25,0.444,null],[25,0.481,null],[25,0.518,null],[25,0.555,null],[25,0.592,null],[25,0.629,null],[25,0.666,null],[25,0.703,null],[26.5,0,0.18],[26.5,0.037,0.1759],[26.5,0.074,0.171],[26.5,0.111,0.1652],[26.5,0.148,0.1579],[26.5,0.185,0.1476],[26.5,0.222,0.1295],[26.5,0.259,0],[26.5,0.296,null],[26.5,0.333,null],[26.5,0.37,null],[26.5,0.407,null],[26.5,0.444,null],[26.5,0.481,null],[26.5,0.518,null],[26.5,0.555,null],[26.5,0.592,null],[26.5,0.629,null],[26.5,0.666,null],[26.5,0.703,null],[28,0,0.1168],[28,0.037,0.1132],[28,0.074,0.1099],[28,0.111,0.1058],[28,0.148,0.1006],[28,0.185,0.0928],[28,0.222,0.0762],[28,0.259,null],[28,0.296,null],[28,0.333,null],[28,0.37,null],[28,0.407,null],[28,0.444,null],[28,0.481,null],[28,0.518,null],[28,0.555,null],[28,0.592,null],[28,0.629,null],[28,0.666,null],[28,0.703,null],[29,0,0.1077],[29,0.037,0.1043],[29,0.074,0.1001],[29,0.111,0.0945],[29,0.148,0.0884],[29,0.185,0.0702],[29,0.222,null],[29,0.259,null],[29,0.296,null],[29,0.333,null],[29,0.37,null],[29,0.407,null],[29,0.444,null],[29,0.481,null],[29,0.518,null],[29,0.555,null],[29,0.592,null],[29,0.629,null],[29,0.666,null],[29,0.703,null],[30.001,0,0],[30.001,0.037,0],[30.001,0.074,0],[30.001,0.111,null],[30.001,0.148,null],[30.001,0.185,null],[30.001,0.222,null],[30.001,0.259,null],[30.001,0.296,null],[30.001,0.333,null],[30.001,0.37,null],[30.001,0.407,null],[30.001,0.444,null],[30.001,0.481,null],[30.001,0.518,null],[30.001,0.555,null],[30.001,0.592,null],[30.001,0.629,null],[30.001,0.666,null],[30.001,0.703,null]]
    // Your current data array, each with X, Y and Value
    dataPoints = dataChartContour;
    console.log(dataChartContour.length);
    
    //Array of your data points that represent the boundary, ordered
    boundaryIndexes = [4, 30, 55, 75, 96, 117, 138, 157, 176, 197, 217, 235, 256, 279, 295, 315, 330, 347, 366, 385, 402];
    // Convert to array of [ [x0, y0], [x1, y1], ....]
    _2dPoints =  [];
    for(let i = 0; i < dataChartContour.length; i++) {
        _2dPoints.push([dataChartContour[i][0], 50 * dataChartContour[i][1]])
    }
    // res.json(dataChartContour);
    
    //Convert boundaryIndexes in a list of edges
    constraintEdges = []
    for (var i = 0; i < boundaryIndexes.length; i++) {
        constraintEdges.push([boundaryIndexes[i], boundaryIndexes[(i + 1) % boundaryIndexes.length]]);
    }
    console.log(_2dPoints);
    
    //Use cdt2d to perform triangulation
    triangles =  cdt2d(_2dPoints, constraintEdges, {exterior: false});
    res.json(triangles);
})

app.listen(port, () => console.log(`Example app listening on port ${port}!`))